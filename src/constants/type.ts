import { ATTENTION_FOCUS, JUDGMENT_FUNCTION, LIFESTYLE, PERCEPTION_FUNCTION, QUESTION } from "src/constants/common";

type ATTENTION_FOCUS_TYPE = typeof ATTENTION_FOCUS[keyof typeof ATTENTION_FOCUS];
type PERCEPTION_FUNCTION_TYPE = typeof PERCEPTION_FUNCTION[keyof typeof PERCEPTION_FUNCTION];
type JUDGMENT_FUNCTION_TYPE = typeof JUDGMENT_FUNCTION[keyof typeof JUDGMENT_FUNCTION];
type LIFESTYLE_TYPE = typeof LIFESTYLE[keyof typeof LIFESTYLE];

type MBTI_SINGLE_TEMPLATE_TYPE = ATTENTION_FOCUS_TYPE | PERCEPTION_FUNCTION_TYPE | JUDGMENT_FUNCTION_TYPE | LIFESTYLE_TYPE;

type QUESTION_TYPE = keyof typeof QUESTION;
type ANSWER_TYPE<T extends MBTI_SINGLE_TEMPLATE_TYPE> = T;
type QUESTION_SENDER_TYPE = {
  type: QUESTION_TYPE,
  contents: string
};
type CHOICE_TYPE<T extends MBTI_SINGLE_TEMPLATE_TYPE> = {
  type: ANSWER_TYPE<T>;
  text: string;
};
type MBTI_PERCENTAGE_TYPE<T extends MBTI_SINGLE_TEMPLATE_TYPE> = {
  type: T;
  percentage: number;
};

type MBTI_OBJ_TYPE = {
  ATTENTION_FOCUS: MBTI_PERCENTAGE_TYPE<ATTENTION_FOCUS_TYPE>;
  PERCEPTION_FUNCTION: MBTI_PERCENTAGE_TYPE<PERCEPTION_FUNCTION_TYPE>;
  JUDGMENT_FUNCTION: MBTI_PERCENTAGE_TYPE<JUDGMENT_FUNCTION_TYPE>;
  LIFESTYLE: MBTI_PERCENTAGE_TYPE<LIFESTYLE_TYPE>;
};

type QUESTION_AND_ANSWER_TYPE<T extends MBTI_SINGLE_TEMPLATE_TYPE> = {
  question: string;
  questionType: QUESTION_TYPE;
  choices: [CHOICE_TYPE<T>, CHOICE_TYPE<T>];
}

type MBTI_TYPE = `${ATTENTION_FOCUS_TYPE}${PERCEPTION_FUNCTION_TYPE}${JUDGMENT_FUNCTION_TYPE}${LIFESTYLE_TYPE}`;

export {
  ATTENTION_FOCUS_TYPE,
  PERCEPTION_FUNCTION_TYPE,
  JUDGMENT_FUNCTION_TYPE,
  LIFESTYLE_TYPE,
  MBTI_SINGLE_TEMPLATE_TYPE,
  QUESTION_TYPE,
  ANSWER_TYPE,
  QUESTION_SENDER_TYPE,
  CHOICE_TYPE,
  MBTI_PERCENTAGE_TYPE,
  MBTI_OBJ_TYPE,
  QUESTION_AND_ANSWER_TYPE,
  MBTI_TYPE
}